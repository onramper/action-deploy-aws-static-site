"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cliMigrate = exports.MIGRATE_SUPPORTED_LANGUAGES = void 0;
const fs = require("fs");
const path = require("path");
const init_1 = require("../../lib/init");
const logging_1 = require("../logging");
const nocti = require("../vendor/noctilucent");
/** The list of languages supported by the built-in noctilucent binary. */
exports.MIGRATE_SUPPORTED_LANGUAGES = nocti.supported_languages();
async function cliMigrate(inputpath = process.cwd() + '/../template.txt', language = exports.MIGRATE_SUPPORTED_LANGUAGES[0], generateOnly = false, outputpath = process.cwd()) {
    (0, logging_1.warning)('This is an experimental feature. We make no guarantees about the outcome or stability of the functionality.');
    const type = 'default'; // "default" is the default type (and maps to 'app')
    const template = (await (0, init_1.availableInitTemplates)()).find(t => t.hasName(type));
    if (!template) {
        throw new Error(`couldn't find template for ${type} app type, this should never happen`);
    }
    if (!exports.MIGRATE_SUPPORTED_LANGUAGES.includes(language)) {
        throw new Error(`Unsupported language for cdk migrate: ${language}. Supported languages are: ${exports.MIGRATE_SUPPORTED_LANGUAGES.join(', ')}`);
    }
    await (0, init_1.initializeProject)(template, language, true, generateOnly, outputpath);
    const template_file = fs.readFileSync(inputpath, 'utf8');
    const generated_app = nocti.transmute(template_file, language);
    // clear out the init'd bin/lib files to replace with our own
    delete_files(outputpath + '/lib/');
    // we hardcode everything to be called noctstack still so this works for now.
    // Will change this to be much smarter once we can change stack name in noct
    const bin_app = `#!/usr/bin/env node
  import 'source-map-support/register';
  import * as cdk from 'aws-cdk-lib';
  import { NoctStack } from '../lib/generated_stack';

  const app = new cdk.App();
  new NoctStack(app, 'NoctStack', {
    /* If you don't specify 'env', this stack will be environment-agnostic.
     * Account/Region-dependent features and context lookups will not work,
     * but a single synthesized template can be deployed anywhere. */

    /* Uncomment the next line to specialize this stack for the AWS Account
     * and Region that are implied by the current CLI configuration. */
    // env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },

    /* Uncomment the next line if you know exactly what Account and Region you
     * want to deploy the stack to. */
    // env: { account: '123456789012', region: 'us-east-1' },

    /* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */
  });`;
    const myname = path.basename(outputpath);
    fs.writeFileSync(outputpath + '/lib/' + 'generated_stack.ts', generated_app);
    fs.writeFileSync(outputpath + '/bin/' + `${myname}.ts`, bin_app);
}
exports.cliMigrate = cliMigrate;
function delete_files(filepath) {
    fs.readdir(filepath, (err, files) => {
        if (err)
            throw err;
        for (const file of files) {
            fs.unlink(filepath + file, (cause) => {
                if (cause)
                    throw cause;
            });
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlncmF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1pZ3JhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3Qix5Q0FBMkU7QUFDM0Usd0NBQXFDO0FBQ3JDLCtDQUErQztBQUUvQywwRUFBMEU7QUFDN0QsUUFBQSwyQkFBMkIsR0FBc0IsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFFbkYsS0FBSyxVQUFVLFVBQVUsQ0FDOUIsWUFBb0IsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLGtCQUFrQixFQUN0RCxRQUFRLEdBQUcsbUNBQTJCLENBQUMsQ0FBQyxDQUFDLEVBQ3pDLFlBQVksR0FBRyxLQUFLLEVBQ3BCLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFO0lBRTFCLElBQUEsaUJBQU8sRUFBQyw2R0FBNkcsQ0FBQyxDQUFDO0lBQ3ZILE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLG9EQUFvRDtJQUM1RSxNQUFNLFFBQVEsR0FBRyxDQUFDLE1BQU0sSUFBQSw2QkFBc0IsR0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlFLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDYixNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixJQUFJLHFDQUFxQyxDQUFDLENBQUM7S0FDMUY7SUFFRCxJQUFJLENBQUMsbUNBQTJCLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQ25ELE1BQU0sSUFBSSxLQUFLLENBQUMseUNBQXlDLFFBQVEsOEJBQThCLG1DQUEyQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDMUk7SUFFRCxNQUFNLElBQUEsd0JBQWlCLEVBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzVFLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRS9ELDZEQUE2RDtJQUM3RCxZQUFZLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxDQUFDO0lBRW5DLDZFQUE2RTtJQUM3RSw0RUFBNEU7SUFDNUUsTUFBTSxPQUFPLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01Bb0JaLENBQUM7SUFDTCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxHQUFHLE9BQU8sR0FBRyxvQkFBb0IsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3RSxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsR0FBRyxPQUFPLEdBQUcsR0FBRyxNQUFNLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBbERELGdDQWtEQztBQUVELFNBQVMsWUFBWSxDQUFDLFFBQWdCO0lBQ3BDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2xDLElBQUksR0FBRztZQUFFLE1BQU0sR0FBRyxDQUFDO1FBQ25CLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3hCLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUNuQyxJQUFJLEtBQUs7b0JBQUUsTUFBTSxLQUFLLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBpbml0aWFsaXplUHJvamVjdCwgYXZhaWxhYmxlSW5pdFRlbXBsYXRlcyB9IGZyb20gJy4uLy4uL2xpYi9pbml0JztcbmltcG9ydCB7IHdhcm5pbmcgfSBmcm9tICcuLi9sb2dnaW5nJztcbmltcG9ydCAqIGFzIG5vY3RpIGZyb20gJy4uL3ZlbmRvci9ub2N0aWx1Y2VudCc7XG5cbi8qKiBUaGUgbGlzdCBvZiBsYW5ndWFnZXMgc3VwcG9ydGVkIGJ5IHRoZSBidWlsdC1pbiBub2N0aWx1Y2VudCBiaW5hcnkuICovXG5leHBvcnQgY29uc3QgTUlHUkFURV9TVVBQT1JURURfTEFOR1VBR0VTOiByZWFkb25seSBzdHJpbmdbXSA9IG5vY3RpLnN1cHBvcnRlZF9sYW5ndWFnZXMoKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsaU1pZ3JhdGUoXG4gIGlucHV0cGF0aDogc3RyaW5nID0gcHJvY2Vzcy5jd2QoKSArICcvLi4vdGVtcGxhdGUudHh0JyxcbiAgbGFuZ3VhZ2UgPSBNSUdSQVRFX1NVUFBPUlRFRF9MQU5HVUFHRVNbMF0sXG4gIGdlbmVyYXRlT25seSA9IGZhbHNlLFxuICBvdXRwdXRwYXRoID0gcHJvY2Vzcy5jd2QoKSxcbikge1xuICB3YXJuaW5nKCdUaGlzIGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlLiBXZSBtYWtlIG5vIGd1YXJhbnRlZXMgYWJvdXQgdGhlIG91dGNvbWUgb3Igc3RhYmlsaXR5IG9mIHRoZSBmdW5jdGlvbmFsaXR5LicpO1xuICBjb25zdCB0eXBlID0gJ2RlZmF1bHQnOyAvLyBcImRlZmF1bHRcIiBpcyB0aGUgZGVmYXVsdCB0eXBlIChhbmQgbWFwcyB0byAnYXBwJylcbiAgY29uc3QgdGVtcGxhdGUgPSAoYXdhaXQgYXZhaWxhYmxlSW5pdFRlbXBsYXRlcygpKS5maW5kKHQgPT4gdC5oYXNOYW1lKHR5cGUhKSk7XG4gIGlmICghdGVtcGxhdGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGNvdWxkbid0IGZpbmQgdGVtcGxhdGUgZm9yICR7dHlwZX0gYXBwIHR5cGUsIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbmApO1xuICB9XG5cbiAgaWYgKCFNSUdSQVRFX1NVUFBPUlRFRF9MQU5HVUFHRVMuaW5jbHVkZXMobGFuZ3VhZ2UpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBsYW5ndWFnZSBmb3IgY2RrIG1pZ3JhdGU6ICR7bGFuZ3VhZ2V9LiBTdXBwb3J0ZWQgbGFuZ3VhZ2VzIGFyZTogJHtNSUdSQVRFX1NVUFBPUlRFRF9MQU5HVUFHRVMuam9pbignLCAnKX1gKTtcbiAgfVxuXG4gIGF3YWl0IGluaXRpYWxpemVQcm9qZWN0KHRlbXBsYXRlLCBsYW5ndWFnZSwgdHJ1ZSwgZ2VuZXJhdGVPbmx5LCBvdXRwdXRwYXRoKTtcbiAgY29uc3QgdGVtcGxhdGVfZmlsZSA9IGZzLnJlYWRGaWxlU3luYyhpbnB1dHBhdGgsICd1dGY4Jyk7XG4gIGNvbnN0IGdlbmVyYXRlZF9hcHAgPSBub2N0aS50cmFuc211dGUodGVtcGxhdGVfZmlsZSwgbGFuZ3VhZ2UpO1xuXG4gIC8vIGNsZWFyIG91dCB0aGUgaW5pdCdkIGJpbi9saWIgZmlsZXMgdG8gcmVwbGFjZSB3aXRoIG91ciBvd25cbiAgZGVsZXRlX2ZpbGVzKG91dHB1dHBhdGggKyAnL2xpYi8nKTtcblxuICAvLyB3ZSBoYXJkY29kZSBldmVyeXRoaW5nIHRvIGJlIGNhbGxlZCBub2N0c3RhY2sgc3RpbGwgc28gdGhpcyB3b3JrcyBmb3Igbm93LlxuICAvLyBXaWxsIGNoYW5nZSB0aGlzIHRvIGJlIG11Y2ggc21hcnRlciBvbmNlIHdlIGNhbiBjaGFuZ2Ugc3RhY2sgbmFtZSBpbiBub2N0XG4gIGNvbnN0IGJpbl9hcHAgPSBgIyEvdXNyL2Jpbi9lbnYgbm9kZVxuICBpbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG4gIGltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG4gIGltcG9ydCB7IE5vY3RTdGFjayB9IGZyb20gJy4uL2xpYi9nZW5lcmF0ZWRfc3RhY2snO1xuXG4gIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gIG5ldyBOb2N0U3RhY2soYXBwLCAnTm9jdFN0YWNrJywge1xuICAgIC8qIElmIHlvdSBkb24ndCBzcGVjaWZ5ICdlbnYnLCB0aGlzIHN0YWNrIHdpbGwgYmUgZW52aXJvbm1lbnQtYWdub3N0aWMuXG4gICAgICogQWNjb3VudC9SZWdpb24tZGVwZW5kZW50IGZlYXR1cmVzIGFuZCBjb250ZXh0IGxvb2t1cHMgd2lsbCBub3Qgd29yayxcbiAgICAgKiBidXQgYSBzaW5nbGUgc3ludGhlc2l6ZWQgdGVtcGxhdGUgY2FuIGJlIGRlcGxveWVkIGFueXdoZXJlLiAqL1xuXG4gICAgLyogVW5jb21tZW50IHRoZSBuZXh0IGxpbmUgdG8gc3BlY2lhbGl6ZSB0aGlzIHN0YWNrIGZvciB0aGUgQVdTIEFjY291bnRcbiAgICAgKiBhbmQgUmVnaW9uIHRoYXQgYXJlIGltcGxpZWQgYnkgdGhlIGN1cnJlbnQgQ0xJIGNvbmZpZ3VyYXRpb24uICovXG4gICAgLy8gZW52OiB7IGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OIH0sXG5cbiAgICAvKiBVbmNvbW1lbnQgdGhlIG5leHQgbGluZSBpZiB5b3Uga25vdyBleGFjdGx5IHdoYXQgQWNjb3VudCBhbmQgUmVnaW9uIHlvdVxuICAgICAqIHdhbnQgdG8gZGVwbG95IHRoZSBzdGFjayB0by4gKi9cbiAgICAvLyBlbnY6IHsgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfSxcblxuICAgIC8qIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2Nkay9sYXRlc3QvZ3VpZGUvZW52aXJvbm1lbnRzLmh0bWwgKi9cbiAgfSk7YDtcbiAgY29uc3QgbXluYW1lID0gcGF0aC5iYXNlbmFtZShvdXRwdXRwYXRoKTtcbiAgZnMud3JpdGVGaWxlU3luYyhvdXRwdXRwYXRoICsgJy9saWIvJyArICdnZW5lcmF0ZWRfc3RhY2sudHMnLCBnZW5lcmF0ZWRfYXBwKTtcbiAgZnMud3JpdGVGaWxlU3luYyhvdXRwdXRwYXRoICsgJy9iaW4vJyArIGAke215bmFtZX0udHNgLCBiaW5fYXBwKTtcbn1cblxuZnVuY3Rpb24gZGVsZXRlX2ZpbGVzKGZpbGVwYXRoOiBzdHJpbmcpIHtcbiAgZnMucmVhZGRpcihmaWxlcGF0aCwgKGVyciwgZmlsZXMpID0+IHtcbiAgICBpZiAoZXJyKSB0aHJvdyBlcnI7XG4gICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICBmcy51bmxpbmsoZmlsZXBhdGggKyBmaWxlLCAoY2F1c2UpID0+IHtcbiAgICAgICAgaWYgKGNhdXNlKSB0aHJvdyBjYXVzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=