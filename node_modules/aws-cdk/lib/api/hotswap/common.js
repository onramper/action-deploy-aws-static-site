"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyPropertyUpdates = exports.evaluatableProperties = exports.reportNonHotswappableResource = exports.reportNonHotswappableChange = exports.classifyChanges = exports.ClassifiedChanges = exports.upperCaseFirstCharacter = exports.lowerCaseFirstCharacter = exports.transformObjectKeys = exports.HotswappableChangeCandidate = exports.HotswapMode = exports.ICON = void 0;
const evaluate_cloudformation_template_1 = require("../evaluate-cloudformation-template");
exports.ICON = 'âœ¨';
var HotswapMode;
(function (HotswapMode) {
    /**
     * Will fall back to CloudFormation when a non-hotswappable change is detected
     */
    HotswapMode["FALL_BACK"] = "fall-back";
    /**
     * Will not fall back to CloudFormation when a non-hotswappable change is detected
     */
    HotswapMode["HOTSWAP_ONLY"] = "hotswap-only";
    /**
     * Will not attempt to hotswap anything and instead go straight to CloudFormation
     */
    HotswapMode["FULL_DEPLOYMENT"] = "full-deployment";
})(HotswapMode || (exports.HotswapMode = HotswapMode = {}));
/**
 * Represents a change that can be hotswapped.
 */
class HotswappableChangeCandidate {
    constructor(logicalId, oldValue, newValue, propertyUpdates) {
        this.logicalId = logicalId;
        this.oldValue = oldValue;
        this.newValue = newValue;
        this.propertyUpdates = propertyUpdates;
    }
}
exports.HotswappableChangeCandidate = HotswappableChangeCandidate;
/**
 * This function transforms all keys (recursively) in the provided `val` object.
 *
 * @param val The object whose keys need to be transformed.
 * @param transform The function that will be applied to each key.
 * @param exclude The keys that will not be transformed and copied to output directly
 * @returns A new object with the same values as `val`, but with all keys transformed according to `transform`.
 */
function transformObjectKeys(val, transform, exclude = {}) {
    if (val == null || typeof val !== 'object') {
        return val;
    }
    if (Array.isArray(val)) {
        // For arrays we just pass parent's exclude object directly
        // since it makes no sense to specify different exclude options for each array element
        return val.map((input) => transformObjectKeys(input, transform, exclude));
    }
    const ret = {};
    for (const [k, v] of Object.entries(val)) {
        const childExclude = exclude[k];
        if (childExclude === true) {
            // we don't transform this object if the key is specified in exclude
            ret[transform(k)] = v;
        }
        else {
            ret[transform(k)] = transformObjectKeys(v, transform, childExclude);
        }
    }
    return ret;
}
exports.transformObjectKeys = transformObjectKeys;
/**
 * This function lower cases the first character of the string provided.
 */
function lowerCaseFirstCharacter(str) {
    return str.length > 0 ? `${str[0].toLowerCase()}${str.slice(1)}` : str;
}
exports.lowerCaseFirstCharacter = lowerCaseFirstCharacter;
/**
 * This function upper cases the first character of the string provided.
 */
function upperCaseFirstCharacter(str) {
    return str.length > 0 ? `${str[0].toUpperCase()}${str.slice(1)}` : str;
}
exports.upperCaseFirstCharacter = upperCaseFirstCharacter;
class ClassifiedChanges {
    constructor(change, hotswappableProps, nonHotswappableProps) {
        this.change = change;
        this.hotswappableProps = hotswappableProps;
        this.nonHotswappableProps = nonHotswappableProps;
    }
    reportNonHotswappablePropertyChanges(ret) {
        const nonHotswappablePropNames = Object.keys(this.nonHotswappableProps);
        if (nonHotswappablePropNames.length > 0) {
            const tagOnlyChange = nonHotswappablePropNames.length === 1 && nonHotswappablePropNames[0] === 'Tags';
            reportNonHotswappableChange(ret, this.change, this.nonHotswappableProps, tagOnlyChange ? 'Tags are not hotswappable' : `resource properties '${nonHotswappablePropNames}' are not hotswappable on this resource type`);
        }
    }
    get namesOfHotswappableProps() {
        return Object.keys(this.hotswappableProps);
    }
}
exports.ClassifiedChanges = ClassifiedChanges;
function classifyChanges(xs, hotswappablePropNames) {
    const hotswappableProps = {};
    const nonHotswappableProps = {};
    for (const [name, propDiff] of Object.entries(xs.propertyUpdates)) {
        if (hotswappablePropNames.includes(name)) {
            hotswappableProps[name] = propDiff;
        }
        else {
            nonHotswappableProps[name] = propDiff;
        }
    }
    return new ClassifiedChanges(xs, hotswappableProps, nonHotswappableProps);
}
exports.classifyChanges = classifyChanges;
function reportNonHotswappableChange(ret, change, nonHotswappableProps, reason, hotswapOnlyVisible) {
    let hotswapOnlyVisibility = true;
    if (hotswapOnlyVisible === false) {
        hotswapOnlyVisibility = false;
    }
    ret.push({
        hotswappable: false,
        rejectedChanges: Object.keys(nonHotswappableProps ?? change.propertyUpdates),
        logicalId: change.logicalId,
        resourceType: change.newValue.Type,
        reason,
        hotswapOnlyVisible: hotswapOnlyVisibility,
    });
}
exports.reportNonHotswappableChange = reportNonHotswappableChange;
function reportNonHotswappableResource(change, reason) {
    return [{
            hotswappable: false,
            rejectedChanges: Object.keys(change.propertyUpdates),
            logicalId: change.logicalId,
            resourceType: change.newValue.Type,
            reason,
        }];
}
exports.reportNonHotswappableResource = reportNonHotswappableResource;
function detectChangedProps(next, prev) {
    const changedProps = [];
    changedProps.push(...detectAdditions(next, prev));
    changedProps.push(...detectRemovals(next, prev));
    return changedProps;
}
function detectAdditions(next, prev, keys = []) {
    // Compare each value of two objects, detect additions (added or modified properties)
    // If we encounter CFn intrinsic (key.startsWith('Fn::') || key == 'Ref'), stop recursion
    if (typeof next !== 'object') {
        if (next !== prev) {
            // there is an addition or change to the property
            return [{ key: new Array(...keys), type: 'added' }];
        }
        else {
            return [];
        }
    }
    if (typeof prev !== 'object') {
        // there is an addition or change to the property
        return [{ key: new Array(...keys), type: 'added' }];
    }
    // If the next is a CFn intrinsic, don't recurse further.
    const childKeys = Object.keys(next);
    if (childKeys.length === 1 && (childKeys[0].startsWith('Fn::') || childKeys[0] === 'Ref')) {
        if (!deepCompareObject(prev, next)) {
            // there is an addition or change to the property
            return [{ key: new Array(...keys), type: 'added' }];
        }
        else {
            return [];
        }
    }
    const changedProps = [];
    // compare children
    for (const key of childKeys) {
        keys.push(key);
        changedProps.push(...detectAdditions(next[key], prev[key], keys));
        keys.pop();
    }
    return changedProps;
}
function detectRemovals(next, prev, keys = []) {
    // Compare each value of two objects, detect removed properties
    // To do this, find any keys that exist only in prev object.
    // If we encounter CFn intrinsic (key.startsWith('Fn::') || key == 'Ref'), stop recursion
    if (next === undefined) {
        return [{ key: new Array(...keys), type: 'removed' }];
    }
    if (typeof prev !== 'object' || typeof next !== 'object') {
        // either prev or next is not an object nor undefined, then the property is not removed
        return [];
    }
    // If the prev is a CFn intrinsic, don't recurse further.
    const childKeys = Object.keys(prev);
    if (childKeys.length === 1 && (childKeys[0].startsWith('Fn::') || childKeys[0] === 'Ref')) {
        // next is not undefined here, so it is at least not removed
        return [];
    }
    const changedProps = [];
    // compare children
    for (const key of childKeys) {
        keys.push(key);
        changedProps.push(...detectRemovals(next[key], prev[key], keys));
        keys.pop();
    }
    return changedProps;
}
/**
 * return true when two objects are identical
 */
function deepCompareObject(lhs, rhs) {
    if (typeof lhs !== 'object') {
        return lhs === rhs;
    }
    if (typeof rhs !== 'object') {
        return false;
    }
    if (Object.keys(lhs).length != Object.keys(rhs).length) {
        return false;
    }
    for (const key of Object.keys(lhs)) {
        if (!deepCompareObject(lhs[key], rhs[key])) {
            return false;
        }
    }
    return true;
}
/**
 * Diff each property of the changes, and check if each diff can be actually hotswapped (i.e. evaluated by EvaluateCloudFormationTemplate.)
 * If any diff cannot be evaluated, they are reported by unevaluatableUpdates.
 * This method works on more granular level than HotswappableChangeCandidate.propertyUpdates.
 *
 * If propertiesToInclude is specified, we only compare properties that are under keys in the argument.
 */
async function evaluatableProperties(evaluate, change, propertiesToInclude) {
    const prev = change.oldValue.Properties;
    const next = change.newValue.Properties;
    const changedProps = detectChangedProps(next, prev).filter(prop => propertiesToInclude?.includes(prop.key[0]) ?? true);
    const evaluatedUpdates = await Promise.all(changedProps
        .filter((prop) => prop.type === 'added')
        .map(async (prop) => {
        const val = getPropertyFromKey(prop.key, next);
        try {
            const evaluated = await evaluate.evaluateCfnExpression(val);
            return {
                ...prop,
                value: evaluated,
            };
        }
        catch (e) {
            if (e instanceof evaluate_cloudformation_template_1.CfnEvaluationException) {
                return prop;
            }
            throw e;
        }
    }));
    const unevaluatableUpdates = evaluatedUpdates.filter(update => update.value === undefined);
    evaluatedUpdates.push(...changedProps.filter(prop => prop.type == 'removed'));
    return {
        updates: evaluatedUpdates,
        unevaluatableUpdates,
    };
}
exports.evaluatableProperties = evaluatableProperties;
function getPropertyFromKey(key, obj) {
    return key.reduce((prev, cur) => prev?.[cur], obj);
}
function overwriteProperty(key, newValue, target) {
    for (const next of key.slice(0, -1)) {
        if (next in target) {
            target = target[next];
        }
        else if (Array.isArray(target)) {
            // When an element is added to an array, we need explicitly allocate the new element.
            target = {};
            target[next] = {};
        }
        else {
            // This is an unexpected condition. Perhaps the deployed task definition is modified outside of CFn.
            return false;
        }
    }
    if (newValue === undefined) {
        delete target[key[key.length - 1]];
    }
    else {
        target[key[key.length - 1]] = newValue;
    }
    return true;
}
/**
 * Take the old template and property updates, and synthesize a new template.
 */
function applyPropertyUpdates(patches, target) {
    target = JSON.parse(JSON.stringify(target));
    for (const patch of patches) {
        const res = overwriteProperty(patch.key, patch.value, target);
        if (!res) {
            throw new Error(`failed to applying patch to ${patch.key.join('.')}. Please try deploying without hotswap first.`);
        }
    }
    return target;
}
exports.applyPropertyUpdates = applyPropertyUpdates;
//# sourceMappingURL=data:application/json;base64,