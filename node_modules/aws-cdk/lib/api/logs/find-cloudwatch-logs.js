"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findCloudWatchLogGroups = void 0;
const aws_auth_1 = require("../aws-auth");
const deployments_1 = require("../deployments");
const evaluate_cloudformation_template_1 = require("../evaluate-cloudformation-template");
// resource types that have associated CloudWatch Log Groups that should _not_ be monitored
const IGNORE_LOGS_RESOURCE_TYPES = ['AWS::EC2::FlowLog', 'AWS::CloudTrail::Trail', 'AWS::CodeBuild::Project'];
// Resource types that will create a CloudWatch log group with a specific name if one is not provided.
// The keys are CFN resource types, and the values are the name of the physical name property of that resource
// and the service name that is used in the automatically created CloudWatch log group.
const RESOURCE_TYPES_WITH_IMPLICIT_LOGS = {
    'AWS::Lambda::Function': {
        PhysicalNamePropertyName: 'FunctionName',
        LogGroupServiceName: 'lambda',
    },
};
async function findCloudWatchLogGroups(sdkProvider, stackArtifact) {
    let sdk;
    const resolvedEnv = await sdkProvider.resolveEnvironment(stackArtifact.environment);
    // try to assume the lookup role and fallback to the default credentials
    try {
        sdk = (await new deployments_1.Deployments({ sdkProvider }).prepareSdkWithLookupRoleFor(stackArtifact)).sdk;
    }
    catch {
        sdk = (await sdkProvider.forEnvironment(resolvedEnv, aws_auth_1.Mode.ForReading)).sdk;
    }
    const listStackResources = new evaluate_cloudformation_template_1.LazyListStackResources(sdk, stackArtifact.stackName);
    const evaluateCfnTemplate = new evaluate_cloudformation_template_1.EvaluateCloudFormationTemplate({
        template: stackArtifact.template,
        parameters: {},
        account: resolvedEnv.account,
        region: resolvedEnv.region,
        partition: (await sdk.currentAccount()).partition,
        urlSuffix: (region) => sdk.getEndpointSuffix(region),
        listStackResources,
    });
    const stackResources = await listStackResources.listStackResources();
    const logGroupNames = findAllLogGroupNames(stackResources, evaluateCfnTemplate);
    return {
        env: resolvedEnv,
        sdk,
        logGroupNames,
    };
}
exports.findCloudWatchLogGroups = findCloudWatchLogGroups;
/**
 * Determine if a CloudWatch Log Group is associated
 * with an ignored resource
 */
function isReferencedFromIgnoredResource(logGroupResource, evaluateCfnTemplate) {
    let foundReference = false;
    const resourcesReferencingLogGroup = evaluateCfnTemplate.findReferencesTo(logGroupResource.LogicalResourceId);
    for (const reference of resourcesReferencingLogGroup) {
        if (IGNORE_LOGS_RESOURCE_TYPES.includes(reference.Type)) {
            foundReference = true;
        }
    }
    return foundReference;
}
/**
 * Find all CloudWatch Log Groups in the deployed template.
 * This will find both explicitely created Log Groups (excluding those associated with ignored resources)
 * as well as Log Groups created implicitely (i.e. Lambda Functions)
 */
function findAllLogGroupNames(stackResources, evaluateCfnTemplate) {
    return stackResources.reduce((logGroupNames, resource) => {
        let logGroupName;
        if (resource.ResourceType === 'AWS::Logs::LogGroup') {
            if (!isReferencedFromIgnoredResource(resource, evaluateCfnTemplate)) {
                logGroupName = resource.PhysicalResourceId;
            }
        }
        else if (RESOURCE_TYPES_WITH_IMPLICIT_LOGS[resource.ResourceType]) {
            const servicePart = RESOURCE_TYPES_WITH_IMPLICIT_LOGS[resource.ResourceType].LogGroupServiceName;
            logGroupName = `/aws/${servicePart}/${resource.PhysicalResourceId}`;
        }
        if (logGroupName) {
            logGroupNames.push(logGroupName);
        }
        return logGroupNames;
    }, []);
}
//# sourceMappingURL=data:application/json;base64,