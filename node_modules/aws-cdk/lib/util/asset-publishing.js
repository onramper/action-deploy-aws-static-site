"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EVENT_TO_LOGGER = exports.PublishingAws = exports.buildAssets = exports.publishAssets = void 0;
const cxapi = require("@aws-cdk/cx-api");
const cdk_assets = require("cdk-assets");
const credentials_1 = require("../api/aws-auth/credentials");
const logging_1 = require("../logging");
/**
 * Use cdk-assets to publish all assets in the given manifest.
 */
async function publishAssets(manifest, sdk, targetEnv, options = {}) {
    // This shouldn't really happen (it's a programming error), but we don't have
    // the types here to guide us. Do an runtime validation to be super super sure.
    if (targetEnv.account === undefined ||
        targetEnv.account === cxapi.UNKNOWN_ACCOUNT ||
        targetEnv.region === undefined ||
        targetEnv.account === cxapi.UNKNOWN_REGION) {
        throw new Error(`Asset publishing requires resolved account and region, got ${JSON.stringify(targetEnv)}`);
    }
    const publisher = new cdk_assets.AssetPublishing(manifest, {
        aws: new PublishingAws(sdk, targetEnv),
        progressListener: new PublishingProgressListener(options.quiet ?? false),
        throwOnError: false,
        publishInParallel: options.parallel ?? true,
        buildAssets: options.buildAssets ?? true,
        publishAssets: true,
        quiet: options.quiet,
    });
    await publisher.publish();
    if (publisher.hasFailures) {
        throw new Error('Failed to publish one or more assets. See the error messages above for more information.');
    }
}
exports.publishAssets = publishAssets;
/**
 * Use cdk-assets to build all assets in the given manifest.
 */
async function buildAssets(manifest, sdk, targetEnv, options = {}) {
    // This shouldn't really happen (it's a programming error), but we don't have
    // the types here to guide us. Do an runtime validation to be super super sure.
    if (targetEnv.account === undefined ||
        targetEnv.account === cxapi.UNKNOWN_ACCOUNT ||
        targetEnv.region === undefined ||
        targetEnv.account === cxapi.UNKNOWN_REGION) {
        throw new Error(`Asset building requires resolved account and region, got ${JSON.stringify(targetEnv)}`);
    }
    const publisher = new cdk_assets.AssetPublishing(manifest, {
        aws: new PublishingAws(sdk, targetEnv),
        progressListener: new PublishingProgressListener(options.quiet ?? false),
        throwOnError: false,
        publishInParallel: options.parallel ?? true,
        buildAssets: true,
        publishAssets: false,
    });
    await publisher.publish();
    if (publisher.hasFailures) {
        throw new Error('Failed to build one or more assets. See the error messages above for more information.');
    }
}
exports.buildAssets = buildAssets;
class PublishingAws {
    constructor(
    /**
     * The base SDK to work with
     */
    aws, 
    /**
     * Environment where the stack we're deploying is going
     */
    targetEnv) {
        this.aws = aws;
        this.targetEnv = targetEnv;
        this.sdkCache = new Map();
    }
    async discoverPartition() {
        return (await this.aws.baseCredentialsPartition(this.targetEnv, credentials_1.Mode.ForWriting)) ?? 'aws';
    }
    async discoverDefaultRegion() {
        return this.targetEnv.region;
    }
    async discoverCurrentAccount() {
        const account = await this.aws.defaultAccount();
        return account ?? {
            accountId: '<unknown account>',
            partition: 'aws',
        };
    }
    async discoverTargetAccount(options) {
        return (await this.sdk(options)).currentAccount();
    }
    async s3Client(options) {
        return (await this.sdk(options)).s3();
    }
    async ecrClient(options) {
        return (await this.sdk(options)).ecr();
    }
    async secretsManagerClient(options) {
        return (await this.sdk(options)).secretsManager();
    }
    /**
     * Get an SDK appropriate for the given client options
     */
    async sdk(options) {
        const env = {
            ...this.targetEnv,
            region: options.region ?? this.targetEnv.region, // Default: same region as the stack
        };
        const cacheKey = JSON.stringify({
            env,
            assumeRuleArn: options.assumeRoleArn,
            assumeRoleExternalId: options.assumeRoleExternalId,
            quiet: options.quiet,
        });
        const maybeSdk = this.sdkCache.get(cacheKey);
        if (maybeSdk) {
            return maybeSdk;
        }
        const sdk = (await this.aws.forEnvironment(env, credentials_1.Mode.ForWriting, {
            assumeRoleArn: options.assumeRoleArn,
            assumeRoleExternalId: options.assumeRoleExternalId,
        }, options.quiet)).sdk;
        this.sdkCache.set(cacheKey, sdk);
        return sdk;
    }
}
exports.PublishingAws = PublishingAws;
exports.EVENT_TO_LOGGER = {
    build: logging_1.debug,
    cached: logging_1.debug,
    check: logging_1.debug,
    debug: logging_1.debug,
    fail: logging_1.error,
    found: logging_1.debug,
    start: logging_1.print,
    success: logging_1.print,
    upload: logging_1.debug,
};
class PublishingProgressListener {
    constructor(quiet) {
        this.quiet = quiet;
    }
    onPublishEvent(type, event) {
        const handler = this.quiet && type !== 'fail' ? logging_1.debug : exports.EVENT_TO_LOGGER[type];
        handler(`[${event.percentComplete}%] ${type}: ${event.message}`);
    }
}
//# sourceMappingURL=data:application/json;base64,