"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockToolkitInfo = void 0;
/* eslint-disable import/order */
const api_1 = require("../../lib/api");
function mockLike() {
    return jest.fn();
}
class MockToolkitInfo extends api_1.ToolkitInfo {
    constructor(sdk, props = {}) {
        super(sdk);
        this.found = true;
        this.prepareEcrRepository = mockLike();
        this.bucketName = props.bucketName ?? 'MockToolkitBucketName';
        this.bucketUrl = props.bucketUrl ?? `https://${this.bucketName}.s3.amazonaws.com/`;
        this.version = props.version ?? 1;
        this.variant = api_1.DEFAULT_BOOTSTRAP_VARIANT;
        this._bootstrapStack = props.bootstrapStack;
    }
    get bootstrapStack() {
        if (!this._bootstrapStack) {
            throw new Error('Bootstrap stack object expected but not supplied to MockToolkitInfo');
        }
        return this._bootstrapStack;
    }
    async validateVersion(expectedVersion, ssmParameterName) {
        const version = ssmParameterName !== undefined ? await api_1.ToolkitInfo.versionFromSsmParameter(this.sdk, ssmParameterName) : this.version;
        if (expectedVersion > version) {
            throw new Error(`This CDK deployment requires bootstrap stack version '${expectedVersion}', found '${version}'. Please run 'cdk bootstrap' with a newer CLI version.`);
        }
    }
}
exports.MockToolkitInfo = MockToolkitInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay10b29sa2l0aW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vY2stdG9vbGtpdGluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQWlDO0FBQ2pDLHVDQUE2RTtBQVU3RSxTQUFTLFFBQVE7SUFDZixPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNuQixDQUFDO0FBRUQsTUFBYSxlQUFnQixTQUFRLGlCQUFXO0lBVTlDLFlBQVksR0FBUyxFQUFFLFFBQThCLEVBQUU7UUFDckQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBVkcsVUFBSyxHQUFHLElBQUksQ0FBQztRQUtiLHlCQUFvQixHQUFHLFFBQVEsRUFBcUQsQ0FBQztRQU9uRyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLElBQUksdUJBQXVCLENBQUM7UUFDOUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxJQUFJLFdBQVcsSUFBSSxDQUFDLFVBQVUsb0JBQW9CLENBQUM7UUFDbkYsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLCtCQUF5QixDQUFDO1FBQ3pDLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBVyxjQUFjO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQztTQUN4RjtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSyxDQUFDLGVBQWUsQ0FBQyxlQUF1QixFQUFFLGdCQUFvQztRQUN4RixNQUFNLE9BQU8sR0FBRyxnQkFBZ0IsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0saUJBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFFdEksSUFBSSxlQUFlLEdBQUcsT0FBTyxFQUFFO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMseURBQXlELGVBQWUsYUFBYSxPQUFPLHlEQUF5RCxDQUFDLENBQUM7U0FDeEs7SUFDSCxDQUFDO0NBQ0Y7QUFsQ0QsMENBa0NDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L29yZGVyICovXG5pbXBvcnQgeyBJU0RLLCBUb29sa2l0SW5mbywgREVGQVVMVF9CT09UU1RSQVBfVkFSSUFOVCB9IGZyb20gJy4uLy4uL2xpYi9hcGknO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25TdGFjayB9IGZyb20gJy4uLy4uL2xpYi9hcGkvdXRpbC9jbG91ZGZvcm1hdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9ja1Rvb2xraXRJbmZvUHJvcHMge1xuICByZWFkb25seSBidWNrZXROYW1lPzogc3RyaW5nO1xuICByZWFkb25seSBidWNrZXRVcmw/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHZlcnNpb24/OiBudW1iZXI7XG4gIHJlYWRvbmx5IGJvb3RzdHJhcFN0YWNrPzogQ2xvdWRGb3JtYXRpb25TdGFjaztcbn1cblxuZnVuY3Rpb24gbW9ja0xpa2U8QSBleHRlbmRzICguLi5hcmdzOiBhbnkpID0+IGFueT4oKTogamVzdC5Nb2NrPFJldHVyblR5cGU8QT4sIFBhcmFtZXRlcnM8QT4+IHtcbiAgcmV0dXJuIGplc3QuZm4oKTtcbn1cblxuZXhwb3J0IGNsYXNzIE1vY2tUb29sa2l0SW5mbyBleHRlbmRzIFRvb2xraXRJbmZvIHtcbiAgcHVibGljIHJlYWRvbmx5IGZvdW5kID0gdHJ1ZTtcbiAgcHVibGljIHJlYWRvbmx5IGJ1Y2tldFVybDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgYnVja2V0TmFtZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgdmVyc2lvbjogbnVtYmVyO1xuICBwdWJsaWMgcmVhZG9ubHkgdmFyaWFudDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcHJlcGFyZUVjclJlcG9zaXRvcnkgPSBtb2NrTGlrZTx0eXBlb2YgVG9vbGtpdEluZm8ucHJvdG90eXBlLnByZXBhcmVFY3JSZXBvc2l0b3J5PigpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2Jvb3RzdHJhcFN0YWNrPzogQ2xvdWRGb3JtYXRpb25TdGFjaztcblxuICBjb25zdHJ1Y3RvcihzZGs6IElTREssIHByb3BzOiBNb2NrVG9vbGtpdEluZm9Qcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIoc2RrKTtcblxuICAgIHRoaXMuYnVja2V0TmFtZSA9IHByb3BzLmJ1Y2tldE5hbWUgPz8gJ01vY2tUb29sa2l0QnVja2V0TmFtZSc7XG4gICAgdGhpcy5idWNrZXRVcmwgPSBwcm9wcy5idWNrZXRVcmwgPz8gYGh0dHBzOi8vJHt0aGlzLmJ1Y2tldE5hbWV9LnMzLmFtYXpvbmF3cy5jb20vYDtcbiAgICB0aGlzLnZlcnNpb24gPSBwcm9wcy52ZXJzaW9uID8/IDE7XG4gICAgdGhpcy52YXJpYW50ID0gREVGQVVMVF9CT09UU1RSQVBfVkFSSUFOVDtcbiAgICB0aGlzLl9ib290c3RyYXBTdGFjayA9IHByb3BzLmJvb3RzdHJhcFN0YWNrO1xuICB9XG5cbiAgcHVibGljIGdldCBib290c3RyYXBTdGFjaygpOiBDbG91ZEZvcm1hdGlvblN0YWNrIHtcbiAgICBpZiAoIXRoaXMuX2Jvb3RzdHJhcFN0YWNrKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcCBzdGFjayBvYmplY3QgZXhwZWN0ZWQgYnV0IG5vdCBzdXBwbGllZCB0byBNb2NrVG9vbGtpdEluZm8nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2Jvb3RzdHJhcFN0YWNrO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHZhbGlkYXRlVmVyc2lvbihleHBlY3RlZFZlcnNpb246IG51bWJlciwgc3NtUGFyYW1ldGVyTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgdmVyc2lvbiA9IHNzbVBhcmFtZXRlck5hbWUgIT09IHVuZGVmaW5lZCA/IGF3YWl0IFRvb2xraXRJbmZvLnZlcnNpb25Gcm9tU3NtUGFyYW1ldGVyKHRoaXMuc2RrLCBzc21QYXJhbWV0ZXJOYW1lKSA6IHRoaXMudmVyc2lvbjtcblxuICAgIGlmIChleHBlY3RlZFZlcnNpb24gPiB2ZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoaXMgQ0RLIGRlcGxveW1lbnQgcmVxdWlyZXMgYm9vdHN0cmFwIHN0YWNrIHZlcnNpb24gJyR7ZXhwZWN0ZWRWZXJzaW9ufScsIGZvdW5kICcke3ZlcnNpb259Jy4gUGxlYXNlIHJ1biAnY2RrIGJvb3RzdHJhcCcgd2l0aCBhIG5ld2VyIENMSSB2ZXJzaW9uLmApO1xuICAgIH1cbiAgfVxufVxuIl19