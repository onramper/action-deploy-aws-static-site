"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/order */
const mockery = require("mockery");
const docs_1 = require("../lib/commands/docs");
const argv = {
    browser: 'echo %u',
    commandHandler: undefined,
};
describe('`cdk docs`', () => {
    beforeEach(done => {
        mockery.registerMock('../../lib/logging', {
            debug() { return; },
            error() { return; },
            print() { return; },
            warning() { return; },
        });
        mockery.enable({ useCleanCache: true, warnOnReplace: true, warnOnUnregistered: false });
        done();
    });
    afterAll(done => {
        mockery.disable();
        mockery.deregisterAll();
        done();
    });
    test('exits with 0 when everything is OK', async () => {
        const result = await (0, docs_1.realHandler)({ args: argv });
        expect(result).toBe(0);
    });
    test('exits with 0 when opening the browser fails', async () => {
        mockery.registerMock('child_process', {
            exec(_, cb) {
                cb(new Error('TEST'));
            },
        });
        const result = await (0, docs_1.realHandler)({ args: argv });
        expect(result).toBe(0);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLWRvY3MudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNkay1kb2NzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBaUM7QUFDakMsbUNBQW1DO0FBRW5DLCtDQUFtRDtBQUVuRCxNQUFNLElBQUksR0FBRztJQUNYLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLGNBQWMsRUFBRSxTQUF5QztDQUMxRCxDQUFDO0FBRUYsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDMUIsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2hCLE9BQU8sQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUU7WUFDeEMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxDQUFDO1lBQ25CLEtBQUssS0FBSyxPQUFPLENBQUMsQ0FBQztZQUNuQixLQUFLLEtBQUssT0FBTyxDQUFDLENBQUM7WUFDbkIsT0FBTyxLQUFLLE9BQU8sQ0FBQyxDQUFDO1NBQ3RCLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN4RixJQUFJLEVBQUUsQ0FBQztJQUNULENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2QsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN4QixJQUFJLEVBQUUsQ0FBQztJQUNULENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3BELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxrQkFBVyxFQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBUyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3RCxPQUFPLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRTtZQUNwQyxJQUFJLENBQUMsQ0FBUyxFQUFFLEVBQTBEO2dCQUN4RSxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN4QixDQUFDO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLGtCQUFXLEVBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFTLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvb3JkZXIgKi9cbmltcG9ydCAqIGFzIG1vY2tlcnkgZnJvbSAnbW9ja2VyeSc7XG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlciB9IGZyb20gJy4uL2xpYi9jb21tYW5kLWFwaSc7XG5pbXBvcnQgeyByZWFsSGFuZGxlciB9IGZyb20gJy4uL2xpYi9jb21tYW5kcy9kb2NzJztcblxuY29uc3QgYXJndiA9IHtcbiAgYnJvd3NlcjogJ2VjaG8gJXUnLFxuICBjb21tYW5kSGFuZGxlcjogdW5kZWZpbmVkIGFzIChDb21tYW5kSGFuZGxlciB8IHVuZGVmaW5lZCksXG59O1xuXG5kZXNjcmliZSgnYGNkayBkb2NzYCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaChkb25lID0+IHtcbiAgICBtb2NrZXJ5LnJlZ2lzdGVyTW9jaygnLi4vLi4vbGliL2xvZ2dpbmcnLCB7XG4gICAgICBkZWJ1ZygpIHsgcmV0dXJuOyB9LFxuICAgICAgZXJyb3IoKSB7IHJldHVybjsgfSxcbiAgICAgIHByaW50KCkgeyByZXR1cm47IH0sXG4gICAgICB3YXJuaW5nKCkgeyByZXR1cm47IH0sXG4gICAgfSk7XG4gICAgbW9ja2VyeS5lbmFibGUoeyB1c2VDbGVhbkNhY2hlOiB0cnVlLCB3YXJuT25SZXBsYWNlOiB0cnVlLCB3YXJuT25VbnJlZ2lzdGVyZWQ6IGZhbHNlIH0pO1xuICAgIGRvbmUoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoZG9uZSA9PiB7XG4gICAgbW9ja2VyeS5kaXNhYmxlKCk7XG4gICAgbW9ja2VyeS5kZXJlZ2lzdGVyQWxsKCk7XG4gICAgZG9uZSgpO1xuICB9KTtcblxuICB0ZXN0KCdleGl0cyB3aXRoIDAgd2hlbiBldmVyeXRoaW5nIGlzIE9LJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlYWxIYW5kbGVyKHsgYXJnczogYXJndiB9IGFzIGFueSk7XG4gICAgZXhwZWN0KHJlc3VsdCkudG9CZSgwKTtcbiAgfSk7XG5cbiAgdGVzdCgnZXhpdHMgd2l0aCAwIHdoZW4gb3BlbmluZyB0aGUgYnJvd3NlciBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrZXJ5LnJlZ2lzdGVyTW9jaygnY2hpbGRfcHJvY2VzcycsIHtcbiAgICAgIGV4ZWMoXzogc3RyaW5nLCBjYjogKGVycjogRXJyb3IsIHN0ZG91dD86IHN0cmluZywgc3RkZXJyPzogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICAgIGNiKG5ldyBFcnJvcignVEVTVCcpKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVhbEhhbmRsZXIoeyBhcmdzOiBhcmd2IH0gYXMgYW55KTtcbiAgICBleHBlY3QocmVzdWx0KS50b0JlKDApO1xuICB9KTtcbn0pO1xuIl19