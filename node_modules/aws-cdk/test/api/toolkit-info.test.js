"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/order */
const api_1 = require("../../lib/api");
const mock_sdk_1 = require("../util/mock-sdk");
let mockSdk;
beforeEach(() => {
    mockSdk = new mock_sdk_1.MockSdk();
});
test('failure to read SSM parameter results in upgrade message for existing bootstrap stack under v5', async () => {
    // GIVEN
    const toolkitInfo = api_1.ToolkitInfo.fromStack((0, mock_sdk_1.mockBootstrapStack)(mockSdk, {
        Outputs: [{ OutputKey: 'BootstrapVersion', OutputValue: '4' }],
    }), mockSdk);
    mockSdk.stubSsm({
        getParameter() {
            throw (0, mock_sdk_1.errorWithCode)('AccessDeniedException', 'Computer says no');
        },
    });
    // THEN
    await expect(toolkitInfo.validateVersion(99, '/abc')).rejects.toThrow(/This CDK deployment requires bootstrap stack version/);
});
test('failure to read SSM parameter results in exception passthrough for existing bootstrap stack v5 or higher', async () => {
    // GIVEN
    const toolkitInfo = api_1.ToolkitInfo.fromStack((0, mock_sdk_1.mockBootstrapStack)(mockSdk, {
        Outputs: [{ OutputKey: 'BootstrapVersion', OutputValue: '5' }],
    }), mockSdk);
    mockSdk.stubSsm({
        getParameter() {
            throw (0, mock_sdk_1.errorWithCode)('AccessDeniedException', 'Computer says no');
        },
    });
    // THEN
    await expect(toolkitInfo.validateVersion(99, '/abc')).rejects.toThrow(/Computer says no/);
});
describe('validateversion without bootstrap stack', () => {
    let toolkitInfo;
    beforeEach(() => {
        toolkitInfo = api_1.ToolkitInfo.bootstrapStackNotFoundInfo(mockSdk);
    });
    test('validating version with explicit SSM parameter succeeds', async () => {
        // GIVEN
        mockSdk.stubSsm({
            getParameter() {
                return { Parameter: { Value: '10' } };
            },
        });
        // THEN
        await expect(toolkitInfo.validateVersion(8, '/abc')).resolves.toBeUndefined();
    });
    test('validating version without explicit SSM parameter fails', async () => {
        // WHEN
        await expect(toolkitInfo.validateVersion(8, undefined)).rejects.toThrow(/This deployment requires a bootstrap stack with a known name/);
    });
    test('validating version with access denied error gives upgrade hint', async () => {
        // GIVEN
        mockSdk.stubSsm({
            getParameter() {
                throw (0, mock_sdk_1.errorWithCode)('AccessDeniedException', 'Computer says no');
            },
        });
        // WHEN
        await expect(toolkitInfo.validateVersion(8, '/abc')).rejects.toThrow(/This CDK deployment requires bootstrap stack version/);
    });
    test('validating version with missing parameter gives bootstrap hint', async () => {
        // GIVEN
        mockSdk.stubSsm({
            getParameter() {
                throw (0, mock_sdk_1.errorWithCode)('ParameterNotFound', 'Wut?');
            },
        });
        // WHEN
        await expect(toolkitInfo.validateVersion(8, '/abc')).rejects.toThrow(/Has the environment been bootstrapped?/);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGtpdC1pbmZvLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0b29sa2l0LWluZm8udGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUFpQztBQUNqQyx1Q0FBNEM7QUFDNUMsK0NBQThFO0FBRTlFLElBQUksT0FBZ0IsQ0FBQztBQUNyQixVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2QsT0FBTyxHQUFHLElBQUksa0JBQU8sRUFBRSxDQUFDO0FBQzFCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdHQUFnRyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ2hILFFBQVE7SUFDUixNQUFNLFdBQVcsR0FBRyxpQkFBVyxDQUFDLFNBQVMsQ0FBQyxJQUFBLDZCQUFrQixFQUFDLE9BQU8sRUFBRTtRQUNwRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUM7S0FDL0QsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRWIsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNkLFlBQVk7WUFDVixNQUFNLElBQUEsd0JBQWEsRUFBQyx1QkFBdUIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ25FLENBQUM7S0FDRixDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7QUFDaEksQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsMEdBQTBHLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDMUgsUUFBUTtJQUNSLE1BQU0sV0FBVyxHQUFHLGlCQUFXLENBQUMsU0FBUyxDQUFDLElBQUEsNkJBQWtCLEVBQUMsT0FBTyxFQUFFO1FBQ3BFLE9BQU8sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQztLQUMvRCxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFYixPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ2QsWUFBWTtZQUNWLE1BQU0sSUFBQSx3QkFBYSxFQUFDLHVCQUF1QixFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDbkUsQ0FBQztLQUNGLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxNQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUM1RixDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7SUFDdkQsSUFBSSxXQUF3QixDQUFDO0lBQzdCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxXQUFXLEdBQUcsaUJBQVcsQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx5REFBeUQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN6RSxRQUFRO1FBQ1IsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUNkLFlBQVk7Z0JBQ1YsT0FBTyxFQUFFLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ3hDLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDaEYsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMseURBQXlELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDekUsT0FBTztRQUNQLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0lBQzFJLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLGdFQUFnRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2hGLFFBQVE7UUFDUixPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ2QsWUFBWTtnQkFDVixNQUFNLElBQUEsd0JBQWEsRUFBQyx1QkFBdUIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ25FLENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7SUFDL0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsZ0VBQWdFLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDaEYsUUFBUTtRQUNSLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDZCxZQUFZO2dCQUNWLE1BQU0sSUFBQSx3QkFBYSxFQUFDLG1CQUFtQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ25ELENBQUM7U0FDRixDQUFDLENBQUM7UUFFSCxPQUFPO1FBQ1AsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7SUFDakgsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9vcmRlciAqL1xuaW1wb3J0IHsgVG9vbGtpdEluZm8gfSBmcm9tICcuLi8uLi9saWIvYXBpJztcbmltcG9ydCB7IGVycm9yV2l0aENvZGUsIG1vY2tCb290c3RyYXBTdGFjaywgTW9ja1NkayB9IGZyb20gJy4uL3V0aWwvbW9jay1zZGsnO1xuXG5sZXQgbW9ja1NkazogTW9ja1NkaztcbmJlZm9yZUVhY2goKCkgPT4ge1xuICBtb2NrU2RrID0gbmV3IE1vY2tTZGsoKTtcbn0pO1xuXG50ZXN0KCdmYWlsdXJlIHRvIHJlYWQgU1NNIHBhcmFtZXRlciByZXN1bHRzIGluIHVwZ3JhZGUgbWVzc2FnZSBmb3IgZXhpc3RpbmcgYm9vdHN0cmFwIHN0YWNrIHVuZGVyIHY1JywgYXN5bmMgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBjb25zdCB0b29sa2l0SW5mbyA9IFRvb2xraXRJbmZvLmZyb21TdGFjayhtb2NrQm9vdHN0cmFwU3RhY2sobW9ja1Nkaywge1xuICAgIE91dHB1dHM6IFt7IE91dHB1dEtleTogJ0Jvb3RzdHJhcFZlcnNpb24nLCBPdXRwdXRWYWx1ZTogJzQnIH1dLFxuICB9KSwgbW9ja1Nkayk7XG5cbiAgbW9ja1Nkay5zdHViU3NtKHtcbiAgICBnZXRQYXJhbWV0ZXIoKSB7XG4gICAgICB0aHJvdyBlcnJvcldpdGhDb2RlKCdBY2Nlc3NEZW5pZWRFeGNlcHRpb24nLCAnQ29tcHV0ZXIgc2F5cyBubycpO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8vIFRIRU5cbiAgYXdhaXQgZXhwZWN0KHRvb2xraXRJbmZvLnZhbGlkYXRlVmVyc2lvbig5OSwgJy9hYmMnKSkucmVqZWN0cy50b1Rocm93KC9UaGlzIENESyBkZXBsb3ltZW50IHJlcXVpcmVzIGJvb3RzdHJhcCBzdGFjayB2ZXJzaW9uLyk7XG59KTtcblxudGVzdCgnZmFpbHVyZSB0byByZWFkIFNTTSBwYXJhbWV0ZXIgcmVzdWx0cyBpbiBleGNlcHRpb24gcGFzc3Rocm91Z2ggZm9yIGV4aXN0aW5nIGJvb3RzdHJhcCBzdGFjayB2NSBvciBoaWdoZXInLCBhc3luYyAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIGNvbnN0IHRvb2xraXRJbmZvID0gVG9vbGtpdEluZm8uZnJvbVN0YWNrKG1vY2tCb290c3RyYXBTdGFjayhtb2NrU2RrLCB7XG4gICAgT3V0cHV0czogW3sgT3V0cHV0S2V5OiAnQm9vdHN0cmFwVmVyc2lvbicsIE91dHB1dFZhbHVlOiAnNScgfV0sXG4gIH0pLCBtb2NrU2RrKTtcblxuICBtb2NrU2RrLnN0dWJTc20oe1xuICAgIGdldFBhcmFtZXRlcigpIHtcbiAgICAgIHRocm93IGVycm9yV2l0aENvZGUoJ0FjY2Vzc0RlbmllZEV4Y2VwdGlvbicsICdDb21wdXRlciBzYXlzIG5vJyk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBhd2FpdCBleHBlY3QodG9vbGtpdEluZm8udmFsaWRhdGVWZXJzaW9uKDk5LCAnL2FiYycpKS5yZWplY3RzLnRvVGhyb3coL0NvbXB1dGVyIHNheXMgbm8vKTtcbn0pO1xuXG5kZXNjcmliZSgndmFsaWRhdGV2ZXJzaW9uIHdpdGhvdXQgYm9vdHN0cmFwIHN0YWNrJywgKCkgPT4ge1xuICBsZXQgdG9vbGtpdEluZm86IFRvb2xraXRJbmZvO1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICB0b29sa2l0SW5mbyA9IFRvb2xraXRJbmZvLmJvb3RzdHJhcFN0YWNrTm90Rm91bmRJbmZvKG1vY2tTZGspO1xuICB9KTtcblxuICB0ZXN0KCd2YWxpZGF0aW5nIHZlcnNpb24gd2l0aCBleHBsaWNpdCBTU00gcGFyYW1ldGVyIHN1Y2NlZWRzJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgbW9ja1Nkay5zdHViU3NtKHtcbiAgICAgIGdldFBhcmFtZXRlcigpIHtcbiAgICAgICAgcmV0dXJuIHsgUGFyYW1ldGVyOiB7IFZhbHVlOiAnMTAnIH0gfTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBUSEVOXG4gICAgYXdhaXQgZXhwZWN0KHRvb2xraXRJbmZvLnZhbGlkYXRlVmVyc2lvbig4LCAnL2FiYycpKS5yZXNvbHZlcy50b0JlVW5kZWZpbmVkKCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3ZhbGlkYXRpbmcgdmVyc2lvbiB3aXRob3V0IGV4cGxpY2l0IFNTTSBwYXJhbWV0ZXIgZmFpbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gV0hFTlxuICAgIGF3YWl0IGV4cGVjdCh0b29sa2l0SW5mby52YWxpZGF0ZVZlcnNpb24oOCwgdW5kZWZpbmVkKSkucmVqZWN0cy50b1Rocm93KC9UaGlzIGRlcGxveW1lbnQgcmVxdWlyZXMgYSBib290c3RyYXAgc3RhY2sgd2l0aCBhIGtub3duIG5hbWUvKTtcbiAgfSk7XG5cbiAgdGVzdCgndmFsaWRhdGluZyB2ZXJzaW9uIHdpdGggYWNjZXNzIGRlbmllZCBlcnJvciBnaXZlcyB1cGdyYWRlIGhpbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gR0lWRU5cbiAgICBtb2NrU2RrLnN0dWJTc20oe1xuICAgICAgZ2V0UGFyYW1ldGVyKCkge1xuICAgICAgICB0aHJvdyBlcnJvcldpdGhDb2RlKCdBY2Nlc3NEZW5pZWRFeGNlcHRpb24nLCAnQ29tcHV0ZXIgc2F5cyBubycpO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIFdIRU5cbiAgICBhd2FpdCBleHBlY3QodG9vbGtpdEluZm8udmFsaWRhdGVWZXJzaW9uKDgsICcvYWJjJykpLnJlamVjdHMudG9UaHJvdygvVGhpcyBDREsgZGVwbG95bWVudCByZXF1aXJlcyBib290c3RyYXAgc3RhY2sgdmVyc2lvbi8pO1xuICB9KTtcblxuICB0ZXN0KCd2YWxpZGF0aW5nIHZlcnNpb24gd2l0aCBtaXNzaW5nIHBhcmFtZXRlciBnaXZlcyBib290c3RyYXAgaGludCcsIGFzeW5jICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIG1vY2tTZGsuc3R1YlNzbSh7XG4gICAgICBnZXRQYXJhbWV0ZXIoKSB7XG4gICAgICAgIHRocm93IGVycm9yV2l0aENvZGUoJ1BhcmFtZXRlck5vdEZvdW5kJywgJ1d1dD8nKTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICAvLyBXSEVOXG4gICAgYXdhaXQgZXhwZWN0KHRvb2xraXRJbmZvLnZhbGlkYXRlVmVyc2lvbig4LCAnL2FiYycpKS5yZWplY3RzLnRvVGhyb3coL0hhcyB0aGUgZW52aXJvbm1lbnQgYmVlbiBib290c3RyYXBwZWQ/Lyk7XG4gIH0pO1xufSk7Il19