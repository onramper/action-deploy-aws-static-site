"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.PrecreatedRole=void 0;const constructs_1=require("constructs"),core_1=require("../../../core"),helpers_internal_1=require("../../../core/lib/helpers-internal");class PrecreatedRole extends core_1.Resource{constructor(scope,id,props){super(scope,id,{account:props.role.env.account,region:props.role.env.region}),this.grantPrincipal=this,this.policyStatements=[],this.managedPolicies=[],this.role=props.role,this.assumeRoleAction=this.role.assumeRoleAction,this.policyFragment=this.role.policyFragment,this.principalAccount=this.role.principalAccount,this.roleArn=this.role.roleArn,this.roleName=this.role.roleName,this.stack=this.role.stack;const rolePath=props.rolePath??this.node.path;constructs_1.Dependable.implement(this,{dependencyRoots:[this.role]}),this.policySynthesizer=helpers_internal_1.PolicySynthesizer.getOrCreate(this),this.policySynthesizer.addRole(rolePath,{roleName:this.roleName,managedPolicies:this.managedPolicies,policyStatements:this.policyStatements,assumeRolePolicy:core_1.Stack.of(this).resolve(props.assumeRolePolicy?.toJSON()?.Statement),missing:props.missing})}attachInlinePolicy(policy){const statements=policy.document.toJSON()?.Statement;statements&&Array.isArray(statements)&&statements.forEach(statement=>{this.policyStatements.push(statement)})}addManagedPolicy(policy){this.managedPolicies.push(policy)}addToPolicy(statement){return this.policyStatements.push(statement.toStatementJson()),!1}addToPrincipalPolicy(statement){return this.addToPolicy(statement),{statementAdded:!0,policyDependable:new constructs_1.DependencyGroup}}grant(grantee,...actions){return this.role.grant(grantee,...actions)}grantPassRole(grantee){return this.role.grantPassRole(grantee)}grantAssumeRole(identity){return this.role.grantAssumeRole(identity)}}exports.PrecreatedRole=PrecreatedRole;
