"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.LambdaMetrics=void 0;class LambdaMetrics{static concurrentExecutionsMaximum(dimensions){return{namespace:"AWS/Lambda",metricName:"ConcurrentExecutions",dimensionsMap:dimensions,statistic:"Maximum"}}static deadLetterErrorsSum(dimensions){return{namespace:"AWS/Lambda",metricName:"DeadLetterErrors",dimensionsMap:dimensions,statistic:"Sum"}}static destinationDeliveryFailuresSum(dimensions){return{namespace:"AWS/Lambda",metricName:"DestinationDeliveryFailures",dimensionsMap:dimensions,statistic:"Sum"}}static durationAverage(dimensions){return{namespace:"AWS/Lambda",metricName:"Duration",dimensionsMap:dimensions,statistic:"Average"}}static errorsSum(dimensions){return{namespace:"AWS/Lambda",metricName:"Errors",dimensionsMap:dimensions,statistic:"Sum"}}static invocationsSum(dimensions){return{namespace:"AWS/Lambda",metricName:"Invocations",dimensionsMap:dimensions,statistic:"Sum"}}static iteratorAgeAverage(dimensions){return{namespace:"AWS/Lambda",metricName:"IteratorAge",dimensionsMap:dimensions,statistic:"Average"}}static postRuntimeExtensionsDurationAverage(dimensions){return{namespace:"AWS/Lambda",metricName:"PostRuntimeExtensionsDuration",dimensionsMap:dimensions,statistic:"Average"}}static provisionedConcurrencyInvocationsSum(dimensions){return{namespace:"AWS/Lambda",metricName:"ProvisionedConcurrencyInvocations",dimensionsMap:dimensions,statistic:"Sum"}}static provisionedConcurrencySpilloverInvocationsSum(dimensions){return{namespace:"AWS/Lambda",metricName:"ProvisionedConcurrencySpilloverInvocations",dimensionsMap:dimensions,statistic:"Sum"}}static provisionedConcurrencyUtilizationMaximum(dimensions){return{namespace:"AWS/Lambda",metricName:"ProvisionedConcurrencyUtilization",dimensionsMap:dimensions,statistic:"Maximum"}}static provisionedConcurrentExecutionsMaximum(dimensions){return{namespace:"AWS/Lambda",metricName:"ProvisionedConcurrentExecutions",dimensionsMap:dimensions,statistic:"Maximum"}}static throttlesSum(dimensions){return{namespace:"AWS/Lambda",metricName:"Throttles",dimensionsMap:dimensions,statistic:"Sum"}}static unreservedConcurrentExecutionsMaximum(dimensions){return{namespace:"AWS/Lambda",metricName:"UnreservedConcurrentExecutions",dimensionsMap:dimensions,statistic:"Maximum"}}}exports.LambdaMetrics=LambdaMetrics;
