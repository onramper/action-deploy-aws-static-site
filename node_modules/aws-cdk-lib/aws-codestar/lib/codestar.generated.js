"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.CfnGitHubRepository=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),cdk=require("../../core"),cfn_parse=require("../../core/lib/helpers-internal");class CfnGitHubRepository extends cdk.CfnResource{static _fromCloudFormation(scope,id,resourceAttributes,options){resourceAttributes=resourceAttributes||{};const resourceProperties=options.parser.parseValue(resourceAttributes.Properties),propsResult=CfnGitHubRepositoryPropsFromCloudFormation(resourceProperties);if(cdk.isResolvableObject(propsResult.value))throw new Error("Unexpected IResolvable");const ret=new CfnGitHubRepository(scope,id,propsResult.value);for(const[propKey,propVal]of Object.entries(propsResult.extraProperties))ret.addPropertyOverride(propKey,propVal);return options.parser.handleAttributes(ret,resourceAttributes,id),ret}constructor(scope,id,props){super(scope,id,{type:CfnGitHubRepository.CFN_RESOURCE_TYPE_NAME,properties:props});try{jsiiDeprecationWarnings.aws_cdk_lib_aws_codestar_CfnGitHubRepositoryProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,CfnGitHubRepository),error}cdk.requireProperty(props,"repositoryName",this),cdk.requireProperty(props,"repositoryOwner",this),this.attrId=cdk.Token.asString(this.getAtt("Id",cdk.ResolutionTypeHint.STRING)),this.code=props.code,this.connectionArn=props.connectionArn,this.enableIssues=props.enableIssues,this.isPrivate=props.isPrivate,this.repositoryAccessToken=props.repositoryAccessToken,this.repositoryDescription=props.repositoryDescription,this.repositoryName=props.repositoryName,this.repositoryOwner=props.repositoryOwner}get cfnProperties(){return{code:this.code,connectionArn:this.connectionArn,enableIssues:this.enableIssues,isPrivate:this.isPrivate,repositoryAccessToken:this.repositoryAccessToken,repositoryDescription:this.repositoryDescription,repositoryName:this.repositoryName,repositoryOwner:this.repositoryOwner}}inspect(inspector){try{jsiiDeprecationWarnings.aws_cdk_lib_TreeInspector(inspector)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.inspect),error}inspector.addAttribute("aws:cdk:cloudformation:type",CfnGitHubRepository.CFN_RESOURCE_TYPE_NAME),inspector.addAttribute("aws:cdk:cloudformation:props",this.cfnProperties)}renderProperties(props){return convertCfnGitHubRepositoryPropsToCloudFormation(props)}}exports.CfnGitHubRepository=CfnGitHubRepository,_a=JSII_RTTI_SYMBOL_1,CfnGitHubRepository[_a]={fqn:"aws-cdk-lib.aws_codestar.CfnGitHubRepository",version:"2.94.0"},CfnGitHubRepository.CFN_RESOURCE_TYPE_NAME="AWS::CodeStar::GitHubRepository";function CfnGitHubRepositoryS3PropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return properties&&typeof properties=="object"&&!Array.isArray(properties)||errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("bucket",cdk.requiredValidator)(properties.bucket)),errors.collect(cdk.propertyValidator("bucket",cdk.validateString)(properties.bucket)),errors.collect(cdk.propertyValidator("key",cdk.requiredValidator)(properties.key)),errors.collect(cdk.propertyValidator("key",cdk.validateString)(properties.key)),errors.collect(cdk.propertyValidator("objectVersion",cdk.validateString)(properties.objectVersion)),errors.wrap('supplied properties not correct for "S3Property"')}function convertCfnGitHubRepositoryS3PropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnGitHubRepositoryS3PropertyValidator(properties).assertSuccess(),{Bucket:cdk.stringToCloudFormation(properties.bucket),Key:cdk.stringToCloudFormation(properties.key),ObjectVersion:cdk.stringToCloudFormation(properties.objectVersion)}):properties}function CfnGitHubRepositoryS3PropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties??{},!(properties&&typeof properties=="object"&&!Array.isArray(properties)))return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("bucket","Bucket",properties.Bucket!=null?cfn_parse.FromCloudFormation.getString(properties.Bucket):void 0),ret.addPropertyResult("key","Key",properties.Key!=null?cfn_parse.FromCloudFormation.getString(properties.Key):void 0),ret.addPropertyResult("objectVersion","ObjectVersion",properties.ObjectVersion!=null?cfn_parse.FromCloudFormation.getString(properties.ObjectVersion):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnGitHubRepositoryCodePropertyValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return properties&&typeof properties=="object"&&!Array.isArray(properties)||errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("s3",cdk.requiredValidator)(properties.s3)),errors.collect(cdk.propertyValidator("s3",CfnGitHubRepositoryS3PropertyValidator)(properties.s3)),errors.wrap('supplied properties not correct for "CodeProperty"')}function convertCfnGitHubRepositoryCodePropertyToCloudFormation(properties){return cdk.canInspect(properties)?(CfnGitHubRepositoryCodePropertyValidator(properties).assertSuccess(),{S3:convertCfnGitHubRepositoryS3PropertyToCloudFormation(properties.s3)}):properties}function CfnGitHubRepositoryCodePropertyFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties??{},!(properties&&typeof properties=="object"&&!Array.isArray(properties)))return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("s3","S3",properties.S3!=null?CfnGitHubRepositoryS3PropertyFromCloudFormation(properties.S3):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}function CfnGitHubRepositoryPropsValidator(properties){if(!cdk.canInspect(properties))return cdk.VALIDATION_SUCCESS;const errors=new cdk.ValidationResults;return properties&&typeof properties=="object"&&!Array.isArray(properties)||errors.collect(new cdk.ValidationResult("Expected an object, but received: "+JSON.stringify(properties))),errors.collect(cdk.propertyValidator("code",CfnGitHubRepositoryCodePropertyValidator)(properties.code)),errors.collect(cdk.propertyValidator("connectionArn",cdk.validateString)(properties.connectionArn)),errors.collect(cdk.propertyValidator("enableIssues",cdk.validateBoolean)(properties.enableIssues)),errors.collect(cdk.propertyValidator("isPrivate",cdk.validateBoolean)(properties.isPrivate)),errors.collect(cdk.propertyValidator("repositoryAccessToken",cdk.validateString)(properties.repositoryAccessToken)),errors.collect(cdk.propertyValidator("repositoryDescription",cdk.validateString)(properties.repositoryDescription)),errors.collect(cdk.propertyValidator("repositoryName",cdk.requiredValidator)(properties.repositoryName)),errors.collect(cdk.propertyValidator("repositoryName",cdk.validateString)(properties.repositoryName)),errors.collect(cdk.propertyValidator("repositoryOwner",cdk.requiredValidator)(properties.repositoryOwner)),errors.collect(cdk.propertyValidator("repositoryOwner",cdk.validateString)(properties.repositoryOwner)),errors.wrap('supplied properties not correct for "CfnGitHubRepositoryProps"')}function convertCfnGitHubRepositoryPropsToCloudFormation(properties){return cdk.canInspect(properties)?(CfnGitHubRepositoryPropsValidator(properties).assertSuccess(),{Code:convertCfnGitHubRepositoryCodePropertyToCloudFormation(properties.code),ConnectionArn:cdk.stringToCloudFormation(properties.connectionArn),EnableIssues:cdk.booleanToCloudFormation(properties.enableIssues),IsPrivate:cdk.booleanToCloudFormation(properties.isPrivate),RepositoryAccessToken:cdk.stringToCloudFormation(properties.repositoryAccessToken),RepositoryDescription:cdk.stringToCloudFormation(properties.repositoryDescription),RepositoryName:cdk.stringToCloudFormation(properties.repositoryName),RepositoryOwner:cdk.stringToCloudFormation(properties.repositoryOwner)}):properties}function CfnGitHubRepositoryPropsFromCloudFormation(properties){if(cdk.isResolvableObject(properties))return new cfn_parse.FromCloudFormationResult(properties);if(properties=properties??{},!(properties&&typeof properties=="object"&&!Array.isArray(properties)))return new cfn_parse.FromCloudFormationResult(properties);const ret=new cfn_parse.FromCloudFormationPropertyObject;return ret.addPropertyResult("code","Code",properties.Code!=null?CfnGitHubRepositoryCodePropertyFromCloudFormation(properties.Code):void 0),ret.addPropertyResult("connectionArn","ConnectionArn",properties.ConnectionArn!=null?cfn_parse.FromCloudFormation.getString(properties.ConnectionArn):void 0),ret.addPropertyResult("enableIssues","EnableIssues",properties.EnableIssues!=null?cfn_parse.FromCloudFormation.getBoolean(properties.EnableIssues):void 0),ret.addPropertyResult("isPrivate","IsPrivate",properties.IsPrivate!=null?cfn_parse.FromCloudFormation.getBoolean(properties.IsPrivate):void 0),ret.addPropertyResult("repositoryAccessToken","RepositoryAccessToken",properties.RepositoryAccessToken!=null?cfn_parse.FromCloudFormation.getString(properties.RepositoryAccessToken):void 0),ret.addPropertyResult("repositoryDescription","RepositoryDescription",properties.RepositoryDescription!=null?cfn_parse.FromCloudFormation.getString(properties.RepositoryDescription):void 0),ret.addPropertyResult("repositoryName","RepositoryName",properties.RepositoryName!=null?cfn_parse.FromCloudFormation.getString(properties.RepositoryName):void 0),ret.addPropertyResult("repositoryOwner","RepositoryOwner",properties.RepositoryOwner!=null?cfn_parse.FromCloudFormation.getString(properties.RepositoryOwner):void 0),ret.addUnrecognizedPropertiesAsExtra(properties),ret}
