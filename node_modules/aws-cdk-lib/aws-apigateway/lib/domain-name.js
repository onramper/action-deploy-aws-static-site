"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.DomainName=exports.SecurityPolicy=void 0;const jsiiDeprecationWarnings=require("../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),apigateway_generated_1=require("./apigateway.generated"),base_path_mapping_1=require("./base-path-mapping"),restapi_1=require("./restapi"),apigwv2=require("../../aws-apigatewayv2"),core_1=require("../../core");var SecurityPolicy;(function(SecurityPolicy2){SecurityPolicy2.TLS_1_0="TLS_1_0",SecurityPolicy2.TLS_1_2="TLS_1_2"})(SecurityPolicy||(exports.SecurityPolicy=SecurityPolicy={}));class DomainName extends core_1.Resource{static fromDomainNameAttributes(scope,id,attrs){try{jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_DomainNameAttributes(attrs)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.fromDomainNameAttributes),error}class Import extends core_1.Resource{constructor(){super(...arguments),this.domainName=attrs.domainName,this.domainNameAliasDomainName=attrs.domainNameAliasTarget,this.domainNameAliasHostedZoneId=attrs.domainNameAliasHostedZoneId}}return new Import(scope,id)}constructor(scope,id,props){super(scope,id),this.basePaths=new Set;try{jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_DomainNameProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,DomainName),error}this.endpointType=props.endpointType||restapi_1.EndpointType.REGIONAL;const edge=this.endpointType===restapi_1.EndpointType.EDGE;if(this.securityPolicy=props.securityPolicy,!core_1.Token.isUnresolved(props.domainName)&&/[A-Z]/.test(props.domainName))throw new Error(`Domain name does not support uppercase letters. Got: ${props.domainName}`);const mtlsConfig=this.configureMTLS(props.mtls),resource=new apigateway_generated_1.CfnDomainName(this,"Resource",{domainName:props.domainName,certificateArn:edge?props.certificate.certificateArn:void 0,regionalCertificateArn:edge?void 0:props.certificate.certificateArn,endpointConfiguration:{types:[this.endpointType]},mutualTlsAuthentication:mtlsConfig,securityPolicy:props.securityPolicy});this.domainName=resource.ref,this.domainNameAliasDomainName=edge?resource.attrDistributionDomainName:resource.attrRegionalDomainName,this.domainNameAliasHostedZoneId=edge?resource.attrDistributionHostedZoneId:resource.attrRegionalHostedZoneId;const multiLevel=this.validateBasePath(props.basePath);props.mapping&&!multiLevel?this.addBasePathMapping(props.mapping,{basePath:props.basePath}):props.mapping&&multiLevel&&this.addApiMapping(props.mapping.deploymentStage,{basePath:props.basePath})}validateBasePath(path){if(this.isMultiLevel(path)){if(this.endpointType===restapi_1.EndpointType.EDGE)throw new Error("multi-level basePath is only supported when endpointType is EndpointType.REGIONAL");if(this.securityPolicy&&this.securityPolicy!==SecurityPolicy.TLS_1_2)throw new Error("securityPolicy must be set to TLS_1_2 if multi-level basePath is provided");return!0}return!1}isMultiLevel(path){return(path?.split("/").filter(x=>!!x)??[]).length>=2}addBasePathMapping(targetApi,options={}){try{jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_IRestApi(targetApi),jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_BasePathMappingOptions(options)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.addBasePathMapping),error}if(this.basePaths.has(options.basePath))throw new Error(`DomainName ${this.node.id} already has a mapping for path ${options.basePath}`);if(this.isMultiLevel(options.basePath))throw new Error('BasePathMapping does not support multi-level paths. Use "addApiMapping instead.');this.basePaths.add(options.basePath);const id=`Map:${options.basePath||"/"}=>${core_1.Names.nodeUniqueId(targetApi.node)}`;return new base_path_mapping_1.BasePathMapping(this,id,{domainName:this,restApi:targetApi,...options})}addApiMapping(targetStage,options={}){try{jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_IStage(targetStage),jsiiDeprecationWarnings.aws_cdk_lib_aws_apigateway_ApiMappingOptions(options)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.addApiMapping),error}if(this.basePaths.has(options.basePath))throw new Error(`DomainName ${this.node.id} already has a mapping for path ${options.basePath}`);this.validateBasePath(options.basePath),this.basePaths.add(options.basePath);const id=`Map:${options.basePath??"none"}=>${core_1.Names.nodeUniqueId(targetStage.node)}`;new apigwv2.CfnApiMapping(this,id,{apiId:targetStage.restApi.restApiId,stage:targetStage.stageName,domainName:this.domainName,apiMappingKey:options.basePath})}configureMTLS(mtlsConfig){if(mtlsConfig)return{truststoreUri:mtlsConfig.bucket.s3UrlForObject(mtlsConfig.key),truststoreVersion:mtlsConfig.version}}}exports.DomainName=DomainName,_a=JSII_RTTI_SYMBOL_1,DomainName[_a]={fqn:"aws-cdk-lib.aws_apigateway.DomainName",version:"2.94.0"};
