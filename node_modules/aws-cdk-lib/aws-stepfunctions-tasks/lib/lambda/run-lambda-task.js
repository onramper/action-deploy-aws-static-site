"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.InvocationType=exports.RunLambdaTask=void 0;const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),iam=require("../../../aws-iam"),sfn=require("../../../aws-stepfunctions"),resource_arn_suffix_1=require("../resource-arn-suffix");class RunLambdaTask{constructor(lambdaFunction,props={}){if(this.lambdaFunction=lambdaFunction,this.props=props,this.integrationPattern=props.integrationPattern||sfn.ServiceIntegrationPattern.FIRE_AND_FORGET,![sfn.ServiceIntegrationPattern.FIRE_AND_FORGET,sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN].includes(this.integrationPattern))throw new Error(`Invalid Service Integration Pattern: ${this.integrationPattern} is not supported to call Lambda.`);if(this.integrationPattern===sfn.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN&&!sfn.FieldUtils.containsTaskToken(props.payload))throw new Error("Task Token is missing in payload (pass JsonPath.taskToken somewhere in payload)")}bind(_task){return{resourceArn:(0,resource_arn_suffix_1.getResourceArn)("lambda","invoke",this.integrationPattern),policyStatements:[new iam.PolicyStatement({resources:this.lambdaFunction.resourceArnsForGrantInvoke,actions:["lambda:InvokeFunction"]})],metricPrefixSingular:"LambdaFunction",metricPrefixPlural:"LambdaFunctions",metricDimensions:{LambdaFunctionArn:this.lambdaFunction.functionArn},parameters:{FunctionName:this.lambdaFunction.functionName,Payload:this.props.payload?this.props.payload.value:sfn.TaskInput.fromJsonPathAt("$").value,InvocationType:this.props.invocationType,ClientContext:this.props.clientContext,Qualifier:this.props.qualifier}}}}exports.RunLambdaTask=RunLambdaTask,_a=JSII_RTTI_SYMBOL_1,RunLambdaTask[_a]={fqn:"aws-cdk-lib.aws_stepfunctions_tasks.RunLambdaTask",version:"2.94.0"};var InvocationType;(function(InvocationType2){InvocationType2.REQUEST_RESPONSE="RequestResponse",InvocationType2.EVENT="Event",InvocationType2.DRY_RUN="DryRun"})(InvocationType||(exports.InvocationType=InvocationType={}));
