"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.LambdaInvocationType=exports.LambdaInvoke=void 0;const jsiiDeprecationWarnings=require("../../../.warnings.jsii.js"),JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti"),iam=require("../../../aws-iam"),sfn=require("../../../aws-stepfunctions"),cdk=require("../../../core"),task_utils_1=require("../private/task-utils");class LambdaInvoke extends sfn.TaskStateBase{constructor(scope,id,props){super(scope,id,props),this.props=props;try{jsiiDeprecationWarnings.aws_cdk_lib_aws_stepfunctions_tasks_LambdaInvokeProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,LambdaInvoke),error}if(this.integrationPattern=props.integrationPattern??sfn.IntegrationPattern.REQUEST_RESPONSE,(0,task_utils_1.validatePatternSupported)(this.integrationPattern,LambdaInvoke.SUPPORTED_INTEGRATION_PATTERNS),this.integrationPattern===sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN&&!sfn.FieldUtils.containsTaskToken(props.payload))throw new Error("Task Token is required in `payload` for callback. Use JsonPath.taskToken to set the token.");if(props.payloadResponseOnly&&(props.integrationPattern||props.invocationType||props.clientContext||props.qualifier))throw new Error("The 'payloadResponseOnly' property cannot be used if 'integrationPattern', 'invocationType', 'clientContext', or 'qualifier' are specified.");this.taskMetrics={metricPrefixSingular:"LambdaFunction",metricPrefixPlural:"LambdaFunctions",metricDimensions:{LambdaFunctionArn:this.props.lambdaFunction.functionArn,...this.props.qualifier&&{Qualifier:this.props.qualifier}}},this.taskPolicies=[new iam.PolicyStatement({resources:this.props.lambdaFunction.resourceArnsForGrantInvoke,actions:["lambda:InvokeFunction"]})],(props.retryOnServiceExceptions??!0)&&this.addRetry({errors:["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],interval:cdk.Duration.seconds(2),maxAttempts:6,backoffRate:2})}_renderTask(){return this.props.payloadResponseOnly?{Resource:this.props.lambdaFunction.functionArn,...this.props.payload&&{Parameters:sfn.FieldUtils.renderObject(this.props.payload.value)}}:{Resource:(0,task_utils_1.integrationResourceArn)("lambda","invoke",this.integrationPattern),Parameters:sfn.FieldUtils.renderObject({FunctionName:this.props.lambdaFunction.functionArn,Payload:this.props.payload?this.props.payload.value:sfn.TaskInput.fromJsonPathAt("$").value,InvocationType:this.props.invocationType,ClientContext:this.props.clientContext,Qualifier:this.props.qualifier})}}}exports.LambdaInvoke=LambdaInvoke,_a=JSII_RTTI_SYMBOL_1,LambdaInvoke[_a]={fqn:"aws-cdk-lib.aws_stepfunctions_tasks.LambdaInvoke",version:"2.94.0"},LambdaInvoke.SUPPORTED_INTEGRATION_PATTERNS=[sfn.IntegrationPattern.REQUEST_RESPONSE,sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN];var LambdaInvocationType;(function(LambdaInvocationType2){LambdaInvocationType2.REQUEST_RESPONSE="RequestResponse",LambdaInvocationType2.EVENT="Event",LambdaInvocationType2.DRY_RUN="DryRun"})(LambdaInvocationType||(exports.LambdaInvocationType=LambdaInvocationType={}));
